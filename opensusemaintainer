#!/usr/bin/perl -w
use strict;
use CGI qw":form :cgi a li start_html end_html br hr"; # "head" would collide with LWP:Simple
use URI::Escape; # perl-URI / liburi-perl
use XML::Simple;
use LWP::Simple;
use JSON::XS;
# needs libcrypt-ssleay-perl for HTTPS
use DB_File;
use Fcntl;
use Time::HiRes qw"gettimeofday tv_interval";


our $debug=1;
our $factory="openSUSE:Factory";
our $dbdir="/home/aw/html/db.suse";
our $cachedir="$dbdir/xml/";
our $expiry=31*24*60*60;
our $html;
our $data={};

sub isfresh($)
{
    my $cachefile=shift;
    my $mtime=(stat($cachefile))[9];
    my $factor=1;
    $factor=3 if($cachefile=~m/source,openSUSE:Factory,.*,_meta/);
    return 0 unless $mtime;
    return($mtime>time-$expiry*$factor);
}

sub cachedget
{
    my $urlbase='https://api.opensuse.org/public';
    my $cachefile=$cachedir.join(',', @_);
    my $url=$urlbase."/".join("/", @_);
    my $xmldata;
    if(isfresh($cachefile)) {
        open(my $f, "<", $cachefile) or die "could not read cachefile: $!";
        local $/;
        $xmldata=<$f>;
        close $f;
    } else {
        my $t=[gettimeofday];
        $xmldata=get($url);
        $html .= "<span style='color:#7b7'>OBS API request took ".tv_interval($t)." seconds</span>\n".br if($debug);
        return unless $xmldata;
        open(my $f, ">", "$cachefile.new") or warn "could not write cachefile: $!";
        print $f $xmldata;
        close $f;
        rename("$cachefile.new", "$cachefile") or warn "could not rename cachefile";
    }
    return $xmldata;
}

sub suseapi
{
    my $xml=cachedget(@_);
    return unless $xml;
    return eval{XMLin($xml, ForceArray => 1)}||undef;
}

sub lookupdbm($$)
{
    my ($db,$key)=@_;
    my %dbmap;
    my $result;
    tie %dbmap, "DB_File", "$dbdir/$db.dbm", O_RDONLY;
    $result=$dbmap{$key};
    untie %dbmap;
    return $result;
}

our %seen=();
sub printusers($)
{ my $userdata=shift;
    my $ps;
    unless ($userdata && ($ps=$userdata->{person})) {
        $html .= "No persons associated with this package<br/>\n";
        return;
    } else {
        $html .= "<div class='userlist'><ul>";
        foreach my $p (@$ps) {
            my $user=$p->{userid};
            if($user eq "--separatordummy--") { $html .= hr; next;}
            next if $seen{$user.$p->{role}}++;
            my $r=$p->{role};
            if($r eq "bugowner") {$r=CGI::strong($r)}
            $html .= qq{<li>$r: <a href="https://build.opensuse.org/user/show/$user">$user</a>\n</li>};
        }
        $html .= "</ul></div>\n";
    }
}

sub entrylist($@)
{
    my $type=shift;
    my @a=@_;
    if(@a>1) {
       $html .= "<div class='warning'>found more than one package that provides this: <ol>";
       foreach(@a) {
           my $u = uri_escape($_);
           $html .= li(a({href=>"?pkg=$u&type=$type"},$_));
       }
       $html .= "</ol></div>";
    }
}

sub lookupfilepkg($)
{
    my $in=shift;
    my $p=lookupdbm("filepkg", $in);
    return split("\000", $p||"");
}

sub get_distro_versions($)
{
    my $pkg=shift;
    my %ver;
    for my $d (qw"opensuse gentoo alpinelinux archlinux voidlinux altlinux nixos guix centos fedora mageia debian ubuntu slackware") {
        $ver{$d} = lookupdbm("${d}src", $pkg);
    }
    return \%ver;
}

sub selftest()
{
    lookupdbm("filepkg", "/bin/bash") eq "bash" or die "filepkg selftest failed";
    lookupdbm("pkgsrc", "Mesa-32bit") eq "Mesa" or die "pkgsrc selftest failed";
    lookupdbm("provides", "Mesa(x86-64)") eq "Mesa" or die "provides selftest failed";
}

# main

$html = header("text/html"). start_html(-title=>"package finder tool",
#-style=>"//aw.zq1.de/code/css/pure-min.css",
-head=>[qq{<style type="text/css">
body {
    background-color:#f8f8f8;
    margin: 1em;
    line-height: 1.4;
}
.myblock {display:inline-block}
.distri {background-color:#fcf}
.version {background-color:#cfc}
.userlist {background-color:#dfd}
.warning {background-color:#ffb}
 </style>},
  qq{<script type="text/javascript" src="//aw.zq1.de/code/js/bmwajax.js"></script>},
  qq{<link type="image/vnd.microsoft.icon" rel="icon" href="/favicon.ico" />},
  qq{<link rel="shortcut icon" href="/favicon.ico" />},
  qq{<meta name="viewport" content="width=400px, initial-scale=1" />}
]
);
my $input1=$ENV{PATH_INFO}||""; $input1=~s{^/}{}; param("pkg", $input1) if $input1 and not param("pkg");
$input1=param("pkg") || "";
$input1=~s/[<>"'&]//g; # sanitize

if($input1 eq "robots.txt") {
    exit 0;
}
if($input1 eq "favicon.ico") {
    print header("image/x-icon").`cat /home/aw/html/maintainerfavicon.ico`;
    exit 0;
}

my %typeselect=(
    "auto" => "anywhere",
    "srcpkg" => "source package name (e.g. Mesa)",
    "binpkg" => "binary package name (e.g. Mesa-32bit)",
    "provides" => "a package's provides (e.g. Mesa(x86-64))",
    "fullpath" => "full path/filename (e.g. /etc/rsyncd.conf)",
    "command" => "command/executable (e.g. cat)");
if(1) {
    $html .= start_form(-name=>"form", -method=>"get", -class=>"pure-form").
        "<p>This tool allows you to find details about openSUSE packages (e.g. maintainer and development project)
        <br/><a href='https://github.com/bmwiedemann/susepkginfo/blob/master/userhelp.md'>read more</a><br>There are <a href='http://sophie.zarb.org/'>other tools like this</a>.</p><p><fieldset>".
        textfield(-name=>'pkg', -class=>'text', -placeholder=>"Search", -accesskey=>"c", -id=>"searchtext", -onchange=>"formsearch()", -oninput=>"formsearch()").
        " in&nbsp;".popup_menu(-name=>'type',-default=>"auto", -values=>[sort keys %typeselect], -labels=>\%typeselect)." ".
        submit(-label=>"Search")."</fieldset></p>". end_form.
        '<div id="replace"></div>'.
        qq'<script language="javascript" type="text/javascript">
          document.form.pkg.focus();
          document.form.pkg.select();'.
qq{
URLs = [
    "https://packages.ubuntu.com/search?keywords=ARG", "Ubuntu",
    "https://packages.debian.org/search?keywords=ARG", "Debian",
    "https://koji.fedoraproject.org/koji/search?match=glob&type=package&terms=ARG*", "Fedora(koji)",
    "https://src.fedoraproject.org/cgit/?q=ARG", "Fedora(git)",
    "https://apps.fedoraproject.org/packages/s/ARG", "Fedora",
    "https://madb.mageia.org/package/list/application/0/t_search/ARG", "Mageia",
    "https://svnweb.mageia.org/packages/cauldron/ARG/current/SPECS/", "MageiaSrc",
    "https://pkgs.alpinelinux.org/packages?name=ARG&arch=x86_64", "Alpine",
    "https://packages.altlinux.org/en/search?query=ARG", "ALTLinux",
    "https://aur.archlinux.org/packages/?K=ARG", "AUR",
    "https://www.archlinux.org/packages/?q=ARG", "Arch Linux",
    "https://www.gnu.org/software/guix/packages/LETTER#ARG", "Guix",
    "https://nixos.org/nixos/packages.html#ARG", "NixOS",
    "https://www.freebsd.org/cgi/ports.cgi?query=ARG", "FreeBSD",
    "https://packages.gentoo.org/packages/search?q=ARG", "Gentoo",
    "https://pmbs.links2linux.de/search?package=1&name=1&search_text=ARG", "Packman",
    "https://build.opensuse.org/search?package=1&name=1&search_text=ARG", "OBS",
    "https://scc.suse.com/packages?name=SUSE%20Linux%20Enterprise%20Server&version=15&arch=x86_64&query=ARG", "SLE",
    "https://software.opensuse.org/search?q=ARG", "openSUSE",
    "https://release-monitoring.org/projects/search/?pattern=ARG", "release-monitoring",
    "https://repology.org/metapackage/ARG/information", "repology"
];
function mysearch(val) {
     var x=document.getElementById("replace");
     if(val.indexOf("/") > -1) {x.innerHTML=""; return;} // be smart and dont search for pathnames
     HTML="You can also search for <strong>"+val+"</strong> in ";
     for (var i = URLs.length-1; i>=0; i-=2) {
         HTML+="<a href='"+URLs[i-1].replace("ARG",val).replace("LETTER",val[0].toUpperCase())+"'>"+URLs[i]+"</a> ";
     }
     if(val == '') {HTML='';}
     x.innerHTML=HTML;
}
function do_formsearch(val) {
     window.location.href = "#"+val;
     mysearch(val);
}
seen={};
function formsearch() {
     var val=document.getElementById("searchtext").value;
     do_formsearch(val);
     // trigger async cache fetch
     if(seen[val]) return;
     /*Ab("//"+window.location.host+window.location.pathname+"?ajax=1&pkg="+val, function(c,s) {
             return; // ignore result
         }, 0);
     seen[val]=1;
     */
}

window.onload = function () {
    var h=window.location.hash;
    if(h.length>1) {
        var v=h.replace("#","");
        document.getElementById("searchtext").value=v;
        mysearch(v);
    } else {
      do_formsearch(document.getElementById("searchtext").value);
    }
};
        </script>}.br.
        "";
}
if(param) {
    my %output;
    my $type=param('type') || "auto";
    $type="fullpath" if $input1=~m{/};
    if($type ne "auto") {
        $output{$type}=$input1;
    } else {
        $input1=~s/\s//g; # drop spaces to better work with copy-pasted strings
        for my $t ("srcpkg", "binpkg", "command", "provides") {
            $output{$t}=$input1;
        }
    }
    if($output{"provides"}) {
        my $p=lookupdbm("provides", $output{"provides"});
        if($p) {
            my @a=split("\000", $p);
            $output{binpkg}=$a[0];
            entrylist("binpkg", @a);
        } else {
            $html .= "provides not found" unless $type eq "auto";
            $output{"provides"}="";
        }
    }
    if($output{"command"}) {
        foreach my $path (qw"/xbin /bin /sbin /usr/bin /usr/sbin") {
            my $fp=$path."/".$output{"command"};
            my @a=lookupfilepkg($fp);
            if(@a) {
                $output{"fullpath"}=$fp;
            }
        }
    }
    if($output{"fullpath"}) {
        $output{"fullpath"}=~s!/$!!; # drop trailing slash
        my @a=lookupfilepkg($output{"fullpath"});
        if(@a) {
            $output{binpkg}=$a[0];
            entrylist("binpkg", @a);
        } else {
            $html .= "file not found".br;
        }
    }
    if($output{binpkg}) {
        my $p=lookupdbm("pkgsrc", $output{binpkg});
        $output{srcpkg}=$p if $p;
        $html .= "binary package not found".br unless $p || $type eq "auto";
    }
    if(my $pkgname=$output{srcpkg}) {
      my $ver=get_distro_versions($output{srcpkg});
      $data->{distroversion}=$ver;
      $data->{name}=$pkgname;
      for my $d (sort(keys(%$ver))) {
          my $v = $ver->{$d};
          if($v) {
              $html .= "<div class='myblock'>found $output{srcpkg}-<span class='version'>$v</span> in <span class='distri'>$d</span> ; </div> ";
          }
      }
      $html .= "<br/>";
      if($ver->{opensuse}) {
        my $devel=lookupdbm("develproject", $pkgname);
        if($devel) {
            my @a=split("\000", $devel);
            $devel={project=>$a[0], package=>$a[1]};
            my @extrainfo;
            if($output{fullpath}) {push @extrainfo, "Path: $output{fullpath}".br}
            if($output{provides}) {push @extrainfo, "Provides: $output{provides}".br}
            if($output{binpkg}) {push @extrainfo, "Binary-Package: $output{binpkg}".br}
            $html .= join("",@extrainfo).qq!Source-Package: <a href="https://build.opensuse.org/package/show/$devel->{project}/$devel->{package}">$pkgname</a> $ver->{opensuse}
                <a href="https://build.opensuse.org/package/view_file/$devel->{project}/$devel->{package}/$pkgname.changes?expand=1">changes</a>!.br.
                qq!devel-project: <a href="https://build.opensuse.org/project/show/$devel->{project}">$devel->{project}</a>!.br.
                "Package-Maintainers:\n";
            my $obsdata=suseapi("source", $devel->{project}, $devel->{package}, "_meta");
            $data->{obs}{pkg}=$obsdata;
            printusers($obsdata);
            $html .= hr."Project-Maintainers:";
            $obsdata=suseapi("source", $devel->{project}, "_meta");
            $data->{obs}{prj}=$obsdata;
            printusers($obsdata);
        } else { $html .= "Bad package on $factory &#8658; <a href=\"https://software.opensuse.org/search?q=$output{srcpkg}\">search</a>" }
      }
    }
}
selftest;
$html .= hr."To report issues, contribute or run your own, please <a href='https://github.com/bmwiedemann/susepkginfo'>use the github repo</a>".
    end_html;
if(!param("ajax")) {
    print $html;
} else {
    print header("application/json").
      JSON::XS->new->pretty->canonical->encode($data);
}
