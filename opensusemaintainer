#!/usr/bin/perl -w
use strict;
use CGI qw":form :cgi a li start_html end_html br hr"; # "head" would collide with LWP:Simple
use XML::Simple;
use LWP::Simple;
# needs libcrypt-ssleay-perl for HTTPS
use DB_File;
use Fcntl;
use Time::HiRes qw"gettimeofday tv_interval";


our $debug=1;
our $factory="openSUSE:Factory";
our $dbdir="/home/aw/html/db.suse";
our $cachedir="$dbdir/xml/";
our $expiry=31*24*60*60;

sub isfresh($)
{
    my $cachefile=shift;
    my $mtime=(stat($cachefile))[9];
    my $factor=1;
    $factor=3 if($cachefile=~m/source,openSUSE:Factory,.*,_meta/);
    return 0 unless $mtime;
    return($mtime>time-$expiry*$factor);
}

sub cachedget
{
    my $urlbase='https://api.opensuse.org/public';
    my $cachefile=$cachedir.join(',', @_);
    my $url=$urlbase."/".join("/", @_);
    my $xmldata;
    if(isfresh($cachefile)) {
        open(my $f, "<", $cachefile) or die "could not read cachefile: $!";
        local $/;
        $xmldata=<$f>;
        close $f;
    } else {
        my $t=[gettimeofday];
        $xmldata=get($url);
        print "<span style='color:#7b7'>OBS API request took ".tv_interval($t)." seconds</span>\n".br if($debug);
        return unless $xmldata;
        open(my $f, ">", $cachefile) or warn "could not write cachefile: $!";
        print $f $xmldata;
        close $f;
    }
    return $xmldata;
}

sub suseapi
{
    my $xml=cachedget(@_);
    return unless $xml;
    return eval{XMLin($xml, ForceArray => 1)}||undef;
}

sub lookupdbm($$)
{
    my ($db,$key)=@_;
    my %dbmap;
    my $result;
    tie %dbmap, "DB_File", "$dbdir/$db.dbm", O_RDONLY;
    $result=$dbmap{$key};
    untie %dbmap;
    return $result;
}

our %seen=();
sub printusers($)
{ my $data=shift;
    my $ps;
    unless ($data && ($ps=$data->{person})) {
        print "No persons associated with this package<br/>\n";
        return;
    } else {
        print "<div class='userlist'><ul>";
        foreach my $p (@$ps) {
            my $user=$p->{userid};
            if($user eq "--separatordummy--") { print hr; next;}
            next if $seen{$user.$p->{role}}++;
            my $r=$p->{role};
            if($r eq "bugowner") {$r=CGI::strong($r)}
            print qq{<li>$r: <a href="https://build.opensuse.org/user/show/$user">$user</a>\n</li>};
        }
        print "</ul></div>\n";
    }
}

sub entrylist($@)
{
    my $type=shift;
    my @a=@_;
    if(@a>1) {
       print "<div class='warning'>found more than one package that provides this: <ol>";
       foreach(@a) {
           print li(a({href=>"?pkg=$_&type=$type"},$_));
       }
       print "</ol></div>";
    }
}

sub lookupfilepkg($)
{
    my $in=shift;
    my $p=lookupdbm("filepkg", $in);
    return split("\000", $p||"");
}

sub selftest()
{
    lookupdbm("filepkg", "/bin/bash") eq "bash" or die "filepkg selftest failed";
    lookupdbm("pkgsrc", "Mesa-32bit") eq "Mesa" or die "pkgsrc selftest failed";
    lookupdbm("provides", "Mesa(x86-64)") eq "Mesa" or die "provides selftest failed";
}

# main

print header("text/html"), start_html(-title=>"$factory maintainer finder tool",
-head=>qq{<style type="text/css">
body {
    background-color:#f8f8f8;
    margin: 1em;
    line-height: 1.4;
}
.userlist {background-color:#dfd}
.warning {background-color:#ffb}
 </style>}
);
my $input1=$ENV{PATH_INFO}||""; $input1=~s{^/}{}; param("pkg", $input1) if $input1 and not param("pkg");
$input1=param("pkg");
#$input1=~s/[^a-zA-Z0-9._-]//g; # sanitize FIXME

my %typeselect=(
    "auto" => "anywhere",
    "srcpkg" => "source package name (e.g. Mesa)",
    "binpkg" => "binary package name (e.g. Mesa-32bit)",
    "provides" => "a package's provides (e.g. Mesa(x86-64))",
    "fullpath" => "full path/filename (e.g. /bin/bash)",
    "command" => "command/executable (e.g. bash)");
if(1) {
    print start_form(-name=>"form", -method=>"get"),
        "<p>This tool allows you to find details about $factory packages
        <br><a href='https://github.com/bmwiedemann/susepkginfo/blob/master/userhelp.md'>read more</a></p><p>",
        textfield(-name=>'pkg', -class=>'text', -placeholder=>"Search", -accesskey=>"c"),"</p>",
        "in ".popup_menu(-name=>'type',-default=>"auto", -values=>[sort keys %typeselect], -labels=>\%typeselect),"</p><p>",
        submit(-label=>"Search"),end_form,
        qq'<script language="javascript" type="text/javascript">
          document.form.pkg.focus();
          document.form.pkg.select();
        </script>'.hr;
}
if(param) {
    my %output;
    my $type=param('type') || "auto";
    $type="fullpath" if $input1=~m{/};
    if($type ne "auto") {
        $output{$type}=$input1;
    } else {
        $input1=~s/\s//g; # drop spaces to better work with copy-pasted strings
        for my $t ("srcpkg", "binpkg", "command", "provides") {
            $output{$t}=$input1;
        }
    }
    if($output{"provides"}) {
        my $p=lookupdbm("provides", $output{"provides"});
        if($p) {
            my @a=split(":", $p);
            $output{binpkg}=$a[0];
            entrylist("binpkg", @a);
        } else {
            print "provides not found" unless $type eq "auto";
            $output{"provides"}="";
        }
    }
    if($output{"command"}) {
        foreach my $path (qw"/xbin /bin /sbin /usr/bin /usr/sbin") {
            my $fp=$path."/".$output{"command"};
            my @a=lookupfilepkg($fp);
            if(@a) {
                $output{"fullpath"}=$fp;
            }
        }
    }
    if($output{"fullpath"}) {
        $output{"fullpath"}=~s!/$!!; # drop trailing slash
        my @a=lookupfilepkg($output{"fullpath"});
        if(@a) {
            $output{binpkg}=$a[0];
            entrylist("binpkg", @a);
        } else {
            print "file not found".br;
        }
    }
    if($output{binpkg}) {
        my $p=lookupdbm("pkgsrc", $output{binpkg});
        $output{srcpkg}=$p if $p;
        print "binary package not found".br unless $p || $type eq "auto";
    }
    if(my $pkgname=$output{srcpkg}) {
        my $data=suseapi("source", $factory, $pkgname, "_meta");
        if((my $devel=$data->{devel}->[0])) {
            if($devel->{project} eq $factory) {
                # follow links within Factory e.g. python-base and kernel-*
                $data=suseapi("source", $factory, $devel->{package}, "_meta");
                $devel=$data->{devel}->[0];
                die "strange error 67: factory has bad link" if(!$devel);
            }
            my @extrainfo;
            if($output{fullpath}) {push @extrainfo, "Path: $output{fullpath}".br}
            if($output{provides}) {push @extrainfo, "Provides: $output{provides}".br}
            if($output{binpkg}) {push @extrainfo, "Binary-Package: $output{binpkg}".br}
            print @extrainfo,qq!Source-Package: <a href="https://build.opensuse.org/package/show/$devel->{project}/$devel->{package}">$pkgname</a>
                <a href="https://build.opensuse.org/package/view_file/$devel->{project}/$devel->{package}/$devel->{package}.changes?expand=1">changes</a>!,br,
                qq!devel-project: <a href="https://build.opensuse.org/project/show/$devel->{project}">$devel->{project}</a>!,br,
                "Package-Maintainers:\n";
            $data=suseapi("source", $devel->{project}, $devel->{package}, "_meta");
            printusers($data);
            print hr,"Project-Maintainers:";
            $data=suseapi("source", $devel->{project}, "_meta");
            printusers($data);
        } else { print "Bad package on $factory &#8658; <a href=\"http://software.opensuse.org/search?q=$output{srcpkg}\">search</a>" }
    }
}
selftest;
print hr,"To report issues, contribute or run your own, please <a href='https://github.com/bmwiedemann/susepkginfo'>use the github repo</a>",
    end_html;
